// @name        Input
// @description Has two parameters: regexp (/^(?:)$/ by default) and validation-delay (300ms by defaut). Use -js-no-validation class on mui-input to create input without validation.
//
// @component   Input
// @method      validate() - validates input
// @method      isValid()  - returns true if the input value is valid and false otherwise
// @method      getValue() - returns input value
//
//
// @markup
//  <div class='mui-input-wrapper'>
//      <label class='mui-input-label'>Username</label>
//      <div class='mui-input-hint'>
//          <span>Username (min 3 characters, only letters allowed)</span>
//          <span class='mui-input-indicator'>
//              <span class='validicon'>
//                  <svg class='mui-svg-icon'>
//                      <use xlink:href='#svg-icon--check'></use>
//                  </svg>
//              </span>
//              <span class='invalidicon'>
//                  <svg class='mui-svg-icon'>
//                      <use xlink:href='#svg-icon--close'></use>
//                  </svg>
//              </span>
//          </span>
//      </div>
//      <div class='mui-input' data-regexp='^[a-zA-Z]{3,}$' data-validation-delay='1000'>
//          <input type='text' id='dss-67o1pdxz' placeholder='Your username'>
//      </div>
//  </div>


.@{muilessium-prefix}input {
    position: relative;    
    height: @default-ui-height;
    width: 100%;
    border: 1px solid @input-border-color;
    border-radius: @default-border-radius;
    overflow: hidden;
    transition: border-color @default-animation-duration @default-animation-function;
    
    &:hover {
        cursor: pointer;
    }
    
    > input {
        height: ~'calc(' @default-ui-height ~' - ' 2px ~')';
        width: 100%;
        padding: 0 1rem;
        line-height: ~'calc(' @default-ui-height ~' - ' 2px ~')';
        color: @input-color;
        background: transparent;
        outline: none;
        overflow: hidden;
        border: none;

        &::placeholder {
            color: @input-placeholder-color;
            text-indent: 0;
            opacity: 1;
            transition: all @default-animation-duration @default-animation-function;
        }

    }
    
    &.-focused {
        border-color: @input-border-color-focused;

        > input {
            color: @input-color;

            &::placeholder {
                text-indent: -50rem;
                opacity: 0;
            }
        }
    }
    
    &.-valid {
        border-color: @input-valid-color;
        
        > input::placeholder {
            color: @input-valid-color;
        }
    }
    
    &.-invalid {
        border-color: @input-invalid-color;
        
        > input::placeholder {
            color: @input-invalid-color;
        }
    }
}


.@{muilessium-prefix}input-label {
    display: block;
    margin-bottom: .2rem;
    font-weight: 600;
    font-size: 1rem;
}


.@{muilessium-prefix}input-hint {
    margin-bottom: .2rem;
    font-size: .8em;
    color: @input-hint-color;

    &.-valid {
        color: @input-valid-color;
    }

    &.-invalid {
        color: @input-invalid-color;
    }
}


.@{muilessium-prefix}input-indicator {
    position: relative;
    padding: 0 .2rem;

    > .validicon,
    > .invalidicon {
        position: absolute;
        line-height: 1.5;
        opacity: 0;
        transition: opacity @default-animation-duration @default-animation-function;
    }

    > .validicon > .@{muilessium-prefix}svg-icon,
    > .invalidicon > .@{muilessium-prefix}svg-icon {
        fill: @input-hint-color;
    }

    &.-valid {
        > .validicon {
            opacity: 1;
            color: @input-valid-color;
        }

        > .validicon > .@{muilessium-prefix}svg-icon {
            fill: @input-valid-color;
        }
    }

    &.-invalid {
        > .invalidicon {
            opacity: 1;
            color: @input-invalid-color;
        }

        > .invalidicon > .@{muilessium-prefix}svg-icon {
            fill: @input-invalid-color;
        }
    }
}


.@{muilessium-prefix}input-wrapper {
    
}

