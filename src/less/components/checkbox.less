// @name Checkbox
// @component Checkbox
// @method setCheckbox() - sets checkbox checked
// @method unsetCheckbox() - sets checkbox unchecked
// @method toggleCheckbox() - sets checkbox checked if it is unchecked and sets it unchecked otherwise
// @method getState() - returns true if checkbox is checked and false otherwise
// @depends svg-icon
//
// @markup
//  <div class='mui-checkbox'>
//      <input type='checkbox' id='dFrp7'>
//      <label>
//          <span class='icon'>
//              <span class='symbol'>
//                  <svg class='mui-svg-icon -black'><use xlink:href="#svg-icon--check"></use></svg>
//              </span>
//          </span>
//          <span class='text'>Lorem ipsum.</span>
//      </label>
//  </div>


// @name Toggle checkbox
// @description Toggle variation of the checkbox component.
// @component Checkbox
// @method setCheckbox() - sets checkbox checked
// @method unsetCheckbox() - sets checkbox unchecked
// @method toggleCheckbox() - sets checkbox checked if it is unchecked and sets it unchecked otherwise
// @method getState() - returns true if checkbox is checked and false otherwise
//
// @markup
//  <div class='mui-checkbox -toggle'>
//      <input type='checkbox' id='qW30v'>
//      <label>
//          <span class='icon'></span>
//          <span class='text'>Lorem ipsum.</span>
//      </label>
//  </div>


.@{muilessium-prefix}checkbox {
    user-select: none;
    
    > input[type=checkbox] {
        display: none;
    }
    
    > label {
        display: inline-block;
        
        &:hover,
        &:focus {
            cursor: pointer;
            outline: none;
            
            > .icon {
                border-color: @black;
                
            }
        }
    }
    
    > label > .icon {
        display: inline-block;
        position: relative;
        vertical-align: middle; 
        height: @default-ui-height;
        width: @default-ui-height;
        border: 1px solid @grey-3;
        border-radius: @default-border-radius;
        
        > .symbol {
            display: inline-block;
            height: @default-ui-height;
            width: @default-ui-height;
            text-align: center;
            line-height: @default-ui-height;
            font-size: @default-ui-height * .8;
            color: @grey-4;
            opacity: 0;
            transition: all @default-animation-duration @default-animation-function;
        }

        > .symbol > .mui-svg-icon {
        }
    }
    
    &.-checked > label > .icon {
        > .symbol {
            opacity: 1;
        }
    }
    
    > label > .text {
        padding: 0 1rem;
    }
    
    &.-toggle {
        > label > .icon {
            background: @grey-3;
            width: @default-ui-height * 2;
            overflow: hidden;
            transition: all @default-animation-duration @default-animation-function;
            
            &::before,
            &::after {
                display: block;
                position: absolute;
                top: -1px;
                left: 0;
                height: @default-ui-height;
                width: @default-ui-height;
                font-size: @default-ui-height * .4; // 2rem * 0.4 = 0.8rem
                line-height: 2.5; // It's 2rem (default ui height). IE11 doesn't support REM units in pseudo-elements.
                text-align: center;
                text-transform: uppercase;
                background: @grey-5;
                color: @white;
                border-radius: @default-border-radius;
                transition: all @default-animation-duration @default-animation-function;
            }
            
            &::before {
                content: 'off';
            }
            
            &::after {
                content: 'on';
                opacity: 0;
            }
        }
        
        &.-checked > label > .icon {
            &::before,
            &::after {
                left: ~'calc(100% - ' @default-ui-height ~')';
                background: @black;
                color: @white;
            }
            
            &::after {
                opacity: 1;
            }
        }
    }
}

